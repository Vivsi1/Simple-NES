#pragma once
#include <cstdint>
#include <array>
#include <memory>

class Cartridge;

class PPU2C02 {
public:
    void connectCartridge(const std::shared_ptr<Cartridge>& c) { cart = c; }
    void    CPUwrite(uint16_t addr, uint8_t data);
    uint8_t CPUread(uint16_t addr);
    uint8_t PPUread(uint16_t addr);
    void    PPUwrite(uint16_t addr, uint8_t data);
    std::array<uint8_t, 0x800> vram{}; //Nametable + Attribute Table     
    std::array<uint8_t, 0x20>  palette{}; //Frame Palette
    std::array<uint8_t, 256> oam{};  //just add it for now, its somehow related to foreground rendering
    struct Color {
    uint8_t r, g, b;
};

std::array<Color, 64> systempalette{
    Color{0x7C, 0x7C, 0x7C}, Color{0x00, 0x00, 0xFC}, Color{0x00, 0x00, 0xBC}, Color{0x44, 0x28, 0xBC},
    Color{0x94, 0x00, 0x84}, Color{0xA8, 0x00, 0x20}, Color{0xA8, 0x10, 0x00}, Color{0x88, 0x14, 0x00},
    Color{0x50, 0x30, 0x00}, Color{0x00, 0x78, 0x00}, Color{0x00, 0x68, 0x00}, Color{0x00, 0x58, 0x00},
    Color{0x00, 0x40, 0x58}, Color{0x00, 0x00, 0x00}, Color{0x00, 0x00, 0x00}, Color{0x00, 0x00, 0x00},
    Color{0xBC, 0xBC, 0xBC}, Color{0x00, 0x78, 0xF8}, Color{0x00, 0x58, 0xF8}, Color{0x68, 0x44, 0xFC},
    Color{0xD8, 0x00, 0xCC}, Color{0xE4, 0x00, 0x58}, Color{0xF8, 0x38, 0x00}, Color{0xE4, 0x5C, 0x10},
    Color{0xAC, 0x7C, 0x00}, Color{0x00, 0xB8, 0x00}, Color{0x00, 0xA8, 0x00}, Color{0x00, 0xA8, 0x44},
    Color{0x00, 0x88, 0x88}, Color{0x00, 0x00, 0x00}, Color{0x00, 0x00, 0x00}, Color{0x00, 0x00, 0x00},
    Color{0xF8, 0xF8, 0xF8}, Color{0x3C, 0xBC, 0xFC}, Color{0x68, 0x88, 0xFC}, Color{0x98, 0x78, 0xF8},
    Color{0xF8, 0x78, 0xF8}, Color{0xF8, 0x58, 0x98}, Color{0xF8, 0x78, 0x58}, Color{0xFC, 0xA0, 0x44},
    Color{0xF8, 0xB8, 0x00}, Color{0xB8, 0xF8, 0x18}, Color{0x58, 0xD8, 0x54}, Color{0x58, 0xF8, 0x98},
    Color{0x00, 0xE8, 0xD8}, Color{0x78, 0x78, 0x78}, Color{0x00, 0x00, 0x00}, Color{0x00, 0x00, 0x00},
    Color{0xFC, 0xFC, 0xFC}, Color{0xA4, 0xE4, 0xFC}, Color{0xB8, 0xB8, 0xF8}, Color{0xD8, 0xB8, 0xF8},
    Color{0xF8, 0xB8, 0xF8}, Color{0xF8, 0xA4, 0xC0}, Color{0xF0, 0xD0, 0xB0}, Color{0xFC, 0xE0, 0xA8},
    Color{0xF8, 0xD8, 0x78}, Color{0xD8, 0xF8, 0x78}, Color{0xB8, 0xF8, 0xB8}, Color{0xB8, 0xF8, 0xD8},
    Color{0x00, 0xFC, 0xFC}, Color{0xF8, 0xD8, 0xF8}, Color{0x00, 0x00, 0x00}, Color{0x00, 0x00, 0x00}
}; //Initialise NES system palette

    uint8_t  ppuctrl{};   
    uint8_t  ppumask{};   
    uint8_t  ppustatus{}; 
    uint8_t  oamaddr{};   
    uint8_t  readBuffer{};
    uint16_t v{};   
    uint16_t t{};   
    uint8_t  x{};   
    bool     w{};  
    std::shared_ptr<Cartridge> cart;
    uint16_t mapNametableAddr(uint16_t addr) const; // apply mirroring
    uint16_t incAmount() const { return (ppuctrl & 0x04) ? 32 : 1; }
};
